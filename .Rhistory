<<<<<<< HEAD
ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level)) +
=======
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1) %>%
add_trace(hovertemplate = "Prop%: %{percent}<extra></extra>")
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(color = "black", stat = "identity", position = "fill") +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1) %>%
add_trace(hovertemplate = "Prop%: %{percent}<extra></extra>")
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
mutate(perc = round(counts*100/sum(counts),2))
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(color = "black", stat = "identity",
position = "fill",
text = paste0("Prop%: ",perc,"%")) +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "y"))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(color = "black", stat = "identity",
position = "fill",
text = paste0("Prop%: ",perc,"%")) +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "purpose"))
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
mutate(perc = round(counts*100/sum(counts),2))
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(color = "black", stat = "identity",
position = "fill",
text = paste0("Prop%: ",perc,"%")) +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text"))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(aes(text = paste0("Prop%: ",perc,"%")),
color = "black", stat = "identity",
position = "fill") +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text"))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(aes(text = paste0("Prop: ",perc,"%")),
color = "black", stat = "identity",
position = "fill") +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text"))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(aes(text = paste0("Prop: ",perc,"%")),
color = "black", stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n())
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(aes(text = paste0("prop: ",counts,"%")),
color = "black", stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",counts,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
#aes(text = paste0("prop: ",counts,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1)
fig1
fig1 <- options(list(digits = 1), ggplotly(p1))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
#aes(text = paste0("prop: ",counts,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1)
fig1
class_table <- df_clustering %>%
group_by(class) %>%
summarise(sum = n()) %>%
ungroup()
View(class_table)
joined_table <- left_join(plot_table, class_table)
View(joined_table)
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
class_table <- df_clustering %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
joined_table <- left_join(plot_table, class_table) %>%
mutate(perc = round(counts*100/sum_count, 2))
##plotting results - change of x only
clust_grouped_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
clust_class_table <- df_clustering %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
clust_plot_table <- left_join(plot_table, class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
runApp('ShinyDashboard')
##plotting results - change of x only
clust_grouped_table <- df_clustering_mod %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
clust_class_table <- df_clustering_mod %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
clust_plot_table <- left_join(clust_grouped_table, clust_class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
runApp('ShinyDashboard')
##plotting results - change of x only
clust_grouped_table <- df_clustering_mod %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
clust_class_table <- df_clustering_mod %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
clust_plot_table <- left_join(clust_grouped_table, clust_class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
runApp('ShinyDashboard')
#values
LCA_model$bic
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill")) %>%
layout(legend = list(orientation = 'h',
xanchor = "center",
x = 0.5,
yanchor = "top",
y = 1.15))
fig1
plot(LCA_model)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2)
View(LCA_model)
install.packages("reshape2")
pacman::p_load(poLCA, ggplot2, plotly, reshape2, tidyverse)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2)
View(lcModelProbs)
# Replicating the poLCA 3-D plot, without the 3-D:
zp1 <- ggplot(lcModelProbs,
aes(x = L1, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_wrap(~ Var1)
print(zp1)
,
# Replicating the poLCA 3-D plot, without the 3-D:
zp1 <- ggplot(lcModelProbs,
aes(x = L2, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_wrap(~ Var1)
print(zp1)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2))
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2))
zp2 <- zp2 + geom_bar(stat = "identity", position = "stack")
zp2 <- zp2 + facet_wrap(~ L2)
zp2 <- zp2 + scale_x_discrete("Class", expand = c(0, 0))
zp2 <- zp2 + scale_y_continuous("Proportion", expand = c(0, 0))
zp2 <- zp2 + scale_fill_discrete("Factor Level")
zp2 <- zp2 + theme_bw()
print(zp2)
clust_plot_table <- left_join(clust_grouped_table, clust_class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_bw(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill")) %>%
layout(legend = list(orientation = 'h',
xanchor = "center",
x = 0.5,
yanchor = "top",
y = 1.15))
fig1
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill")) %>%
layout(legend = list(orientation = 'h',
xanchor = "center",
x = 0.5,
yanchor = "top",
y = 1.15))
fig1
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2)
# Replicating the poLCA 3-D plot, without the 3-D:
zp1 <- ggplot(lcModelProbs,
aes(x = L2, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_wrap(~ Var1)
print(zp1)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2))
zp2 <- zp2 + geom_bar(stat = "identity", position = "stack")
zp2 <- zp2 + facet_wrap(~ L2)
zp2 <- zp2 + scale_x_discrete("Class", expand = c(0, 0))
zp2 <- zp2 + scale_y_continuous("Proportion", expand = c(0, 0))
zp2 <- zp2 + scale_fill_discrete("Factor Level")
zp2 <- zp2 + theme_bw()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_minimal()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_bw()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_bw()
print(zp2)
shiny::runApp('ShinyDashboard')
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
#scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_bw()
print(zp2)
#theme_bw()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename("Class" = "Var1",
"Factor_level" = "Var2"
"Prop" = "value",
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename("Class" = "Var1",
"Factor_level" = "Var2"
"Prop" = "value",
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(stat = "identity", position = "stack") +
>>>>>>> 9ef5e28fe00faf39dedcf8a46f7909dead9c4549
facet_wrap(~ Category) +
coord_flip() +
labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0))
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2))
<<<<<<< HEAD
p_overall <- ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level)) +
facet_wrap(~ Category) + coord_flip() + labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0))
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2))
p_overall <- ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level)) +
facet_wrap(~ Category) + coord_flip() + labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0))
ggplotly(p_overall)
tooltip_levels <- for (n in names(df_clustering))
if (is.factor(df_clustering[[n]])) {
print(n)
print(levels(df_clustering[[n]]))
}
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2))
p_overall <- ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level)) +
facet_wrap(~ Category) + coord_flip() + labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0))
ggplotly(p_overall, tooltip = )
View(df_clustering)
for (n in names(df_clustering))
if (is.factor(df_clustering[[n]])) {
print(n)
print(levels(df_clustering[[n]]))
}
tooltip_levels <- df_clustering %>%
sapply(levels)
View(tooltip_levels)
tooltip_levels <- df_clustering %>%
sapply(levels)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2))
p_overall <- ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level)) +
facet_wrap(~ Category) + coord_flip() + labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0))
ggplotly(p_overall, tooltip = tooltip_levels)
View(df_clustering_prob)
View(tooltip_levels)
tooltip_levels <- df_clustering %>%
summarise_each(funs(list(levels(.))))
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels <- df_clustering %>%
summarise_each(funs(list(levels(.)))) %>%
pivot_longer(cols = region:class, names_to = "colname")
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels <- df_clustering %>%
summarise_each(funs(list(levels(.)))) %>%
select(!ID) %>%
pivot_longer(cols = region:class, names_to = "colname")
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels <- df_clustering %>% purrr::map(levels)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels <- lapply(df_clustering[sapply(df_clustering, is.factor)], levels)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
View(tooltip_levels)
tooltip_levels <- df_clustering %>%
gather(name, value) %>%
count(name, value)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels <- df_clustering %>%
gather(name, value)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value) %>%
count(name, value) %>%
select(!count)
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value) %>%
count(name, value)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value) %>%
count(name, value) %>%
select(!n)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value) %>%
count(name, value) %>%
select(!n) %>%
group_by(name) %>%
mutate(factor_level = rownames(value))
tooltip_levels <- df_clustering %>%
select(!ID) %>%
group_by(name, value) %>%
count(name, value) %>%
ungroup() %>%
select(!n) %>%
group_by(name) %>%
mutate(factor_level = rownames(value))
tooltip_levels <- df_clustering %>%
select(!ID) %>%
group_by(name, value) %>%
count(name, value) %>%
ungroup() %>%
select(!n)
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value) %>%
count(name, value) %>%
select(!n)
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value) %>%
count(name, value)
View(df_clustering_prob)
View(df_clustering)
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value) %>%
count(name, value)
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value)
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value) %>%
distinct()
tooltip_levels <- df_clustering %>%
select(!ID) %>%
gather(name, value) %>%
count(name, value)
tooltip_levels <- df_clustering %>%
summarise_each(funs(list(levels(.))))
tooltip_levels <- df_clustering %>%
sapply(levels)
tooltip_levels <- df_clustering %>%
select(!ID) %>%
sapply(levels)
tooltip_levels$region
tooltip_levels <- lapply(df[sapply(df_clustering, is.factor)], levels)
tooltip_levels <- lapply(df_clustering[sapply(df_clustering, is.factor)], levels)
View(tooltip_levels)
tooltip_levels <- df_clustering %>%
select(!ID) %>%
sapply(levels)
for i in names(df_clustering) {
for (i in names(df_clustering)) {
df_clustering$[[i]] %>%
for (i in names(df_clustering)) {
df_clustering[[i]] %>%
print(unique())
}
for (i in names(df_clustering)) {
df_clustering[[i]] %>%
unique()
}
df_clustering$region %>%
unique()
df_clustering$region %>%
levels()
levels(df_clustering$region)
list(levels(df_clustering$region))
tooltiplabels <- as.dataframe(levels(df_clustering$region))
tooltiplabels <- as.data.frame(levels(df_clustering$region))
View(tooltiplabels)
tooltiplabels <- df_clustering %>%
as.data.frame(levels(region))
tooltiplabels <- as.data.frame(levels(df_clustering$region))
tooltiplabels <- df_clustering %>%
select(region) %>%
levels(region)
tooltiplabels <- df_clustering %>%
select(region) %>%
levels()
tooltiplabels <- df_clustering %>%
select(region) %>%
distinct(region)
View(tooltiplabels)
tooltiplabels <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(name = `region`)
tooltiplabels <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(name = colnames())
tooltiplabels <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = colnames())
tooltiplabels <- function(x) {df_clustering %>%
select({{a}}) %>%
distinct({{a}}) %>%
mutate(factor = a)}
tooltiplabels <- function(x) {df_clustering %>%
select({{a}}) %>%
distinct({{a}}) %>%
mutate(factor = a)}
tooltiplabels(region)
tooltiplabels <- function(x) {df_clustering %>%
select({{x}}) %>%
distinct({{x}}) %>%
mutate(factor = x)}
tooltiplabels(region)
tooltiplabels <- function(x) {df_clustering %>%
select({{x}}) %>%
distinct({{x}}) %>%
mutate(factor = x)}
tooltiplabels(`region`)
tooltiplabels <- function(x) {df_clustering %>%
select(!!sym(x)) %>%
distinct(!!sym(x)) %>%
mutate(factor = "x")}
tooltiplabels(`region`)
tooltiplabels <- function(x) {df_clustering %>%
select(!!sym(x)) %>%
distinct(!!sym(x)) %>%
mutate(factor = "x")}
tooltiplabels(region)
tooltiplabels <- df_clustering %>%
select(region) %>%
distinct(region)
View(tooltip_levels)
View(tooltiplabels)
tooltiplabels <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region")
tooltiplabels <- data.frame()
colnames(tooltiplabels) <- c('values', 'region')
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'region')
for (n in names(df_clustering)) {
factor_level <- df_clustering %>%
select(n) %>%
distinct(n) %>%
mutate(factor = deparse(substitute(n))) %>%
rename(n = "values")
}
for (n in names(df_clustering)) {
factor_level <- df_clustering %>%
select(n) %>%
distinct(n) %>%
mutate(factor = deparse(substitute(n))) %>%
rename(n = "values")
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering)) {
factor_level <- df_clustering %>%
select([[n]]) %>%
for (n in names(df_clustering)) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename({{n}} = "values")
for (n in names(df_clustering)) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename(n = "values")
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering)) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename(`n` = "values")
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region")
View(factor_level)
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region") %>%
rename(region = "values")
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region") %>%
rename(`region` = "values")
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region") %>%
rename("values" = region)
for (n in names(df_clustering)) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = {{n}})
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = {{n}})
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
factor_level <- df_clustering %>%
select(region)
factor_level <- df_clustering %>%
select(region) %>%
distinct(region)
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region")
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region") %>%
rename("values" = region)
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = {{n}})
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n)))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = {{n}})
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in colnames(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = {{n}})
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select(!!sym(n)) %>%
distinct(!!sym(n)) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = !!sym(n))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select(!!sym(n)) %>%
distinct(!!sym(n)) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = !!sym(n))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
View(tooltiplabels)
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select(!!sym(n)) %>%
distinct(!!sym(n)) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = !!sym(n))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = !!sym(n))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
rename("values" = {{n}})
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
View(df_clustering)
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region") %>%
rename("values" = region)
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region") %>%
rename("values" = region)
names(df_clustering[-1])
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select(n) %>%
distinct(n) %>%
mutate(factor = deparse(substitute(n))) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute({{n}}))) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = n) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select(n) %>%
distinct(n) %>%
mutate(factor = n) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
=======
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(
aes(text = paste0("prop: ",Prop,"%")),
stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2, tooltip = c("text", "x", "fill"))
fig2
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
runApp('ShinyDashboard')
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
runApp('ShinyDashboard')
>>>>>>> 9ef5e28fe00faf39dedcf8a46f7909dead9c4549

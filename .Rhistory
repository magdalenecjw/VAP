fig1 <- ggplotly(p1) %>%
add_trace(hovertemplate = "Prop%: %{percent}<extra></extra>")
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
mutate(perc = round(counts*100/sum(counts),2))
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(color = "black", stat = "identity", position = "fill") +
labs(x = "Class", y = "Percent", fill = "purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1) %>%
add_trace(hovertemplate = "Prop%: %{percent}<extra></extra>")
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(color = "black", stat = "identity", position = "fill") +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1) %>%
add_trace(hovertemplate = "Prop%: %{percent}<extra></extra>")
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
mutate(perc = round(counts*100/sum(counts),2))
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(color = "black", stat = "identity",
position = "fill",
text = paste0("Prop%: ",perc,"%")) +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "y"))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(color = "black", stat = "identity",
position = "fill",
text = paste0("Prop%: ",perc,"%")) +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "purpose"))
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
mutate(perc = round(counts*100/sum(counts),2))
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(color = "black", stat = "identity",
position = "fill",
text = paste0("Prop%: ",perc,"%")) +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text"))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(aes(text = paste0("Prop%: ",perc,"%")),
color = "black", stat = "identity",
position = "fill") +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text"))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(aes(text = paste0("Prop: ",perc,"%")),
color = "black", stat = "identity",
position = "fill") +
labs(x = "Class", y = "Percent", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text"))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(aes(text = paste0("Prop: ",perc,"%")),
color = "black", stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n())
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(aes(text = paste0("prop: ",counts,"%")),
color = "black", stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",counts,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
#aes(text = paste0("prop: ",counts,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1)
fig1
fig1 <- options(list(digits = 1), ggplotly(p1))
fig1
p1 <- ggplot(plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
#aes(text = paste0("prop: ",counts,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1)
fig1
class_table <- df_clustering %>%
group_by(class) %>%
summarise(sum = n()) %>%
ungroup()
View(class_table)
joined_table <- left_join(plot_table, class_table)
View(joined_table)
##plotting results - change of x only
plot_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
class_table <- df_clustering %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
joined_table <- left_join(plot_table, class_table) %>%
mutate(perc = round(counts*100/sum_count, 2))
##plotting results - change of x only
clust_grouped_table <- df_clustering %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
clust_class_table <- df_clustering %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
clust_plot_table <- left_join(plot_table, class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
runApp('ShinyDashboard')
##plotting results - change of x only
clust_grouped_table <- df_clustering_mod %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
clust_class_table <- df_clustering_mod %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
clust_plot_table <- left_join(clust_grouped_table, clust_class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
runApp('ShinyDashboard')
##plotting results - change of x only
clust_grouped_table <- df_clustering_mod %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
clust_class_table <- df_clustering_mod %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
clust_plot_table <- left_join(clust_grouped_table, clust_class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
runApp('ShinyDashboard')
#values
LCA_model$bic
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill")) %>%
layout(legend = list(orientation = 'h',
xanchor = "center",
x = 0.5,
yanchor = "top",
y = 1.15))
fig1
plot(LCA_model)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2)
View(LCA_model)
install.packages("reshape2")
pacman::p_load(poLCA, ggplot2, plotly, reshape2, tidyverse)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2)
View(lcModelProbs)
# Replicating the poLCA 3-D plot, without the 3-D:
zp1 <- ggplot(lcModelProbs,
aes(x = L1, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_wrap(~ Var1)
print(zp1)
,
# Replicating the poLCA 3-D plot, without the 3-D:
zp1 <- ggplot(lcModelProbs,
aes(x = L2, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_wrap(~ Var1)
print(zp1)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2))
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2))
zp2 <- zp2 + geom_bar(stat = "identity", position = "stack")
zp2 <- zp2 + facet_wrap(~ L2)
zp2 <- zp2 + scale_x_discrete("Class", expand = c(0, 0))
zp2 <- zp2 + scale_y_continuous("Proportion", expand = c(0, 0))
zp2 <- zp2 + scale_fill_discrete("Factor Level")
zp2 <- zp2 + theme_bw()
print(zp2)
clust_plot_table <- left_join(clust_grouped_table, clust_class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_bw(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill")) %>%
layout(legend = list(orientation = 'h',
xanchor = "center",
x = 0.5,
yanchor = "top",
y = 1.15))
fig1
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill")) %>%
layout(legend = list(orientation = 'h',
xanchor = "center",
x = 0.5,
yanchor = "top",
y = 1.15))
fig1
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2)
# Replicating the poLCA 3-D plot, without the 3-D:
zp1 <- ggplot(lcModelProbs,
aes(x = L2, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_wrap(~ Var1)
print(zp1)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2))
zp2 <- zp2 + geom_bar(stat = "identity", position = "stack")
zp2 <- zp2 + facet_wrap(~ L2)
zp2 <- zp2 + scale_x_discrete("Class", expand = c(0, 0))
zp2 <- zp2 + scale_y_continuous("Proportion", expand = c(0, 0))
zp2 <- zp2 + scale_fill_discrete("Factor Level")
zp2 <- zp2 + theme_bw()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_minimal()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_bw()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_bw()
print(zp2)
shiny::runApp('ShinyDashboard')
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
#scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_bw()
print(zp2)
#theme_bw()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename("Class" = "Var1",
"Factor_level" = "Var2"
"Prop" = "value",
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename("Class" = "Var1",
"Factor_level" = "Var2"
"Prop" = "value",
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = Prop*100)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2))
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(
aes(text = paste0("prop: ",Prop,"%")),
stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2, tooltip = c("text", "x", "fill"))
fig2
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')

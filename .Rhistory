tooltiplabels <- rbind(tooltiplabels, factor_level)
}
View(df_clustering)
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region") %>%
rename("values" = region)
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute(n))) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
factor_level <- df_clustering %>%
select(region) %>%
distinct(region) %>%
mutate(factor = "region") %>%
rename("values" = region)
names(df_clustering[-1])
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select(n) %>%
distinct(n) %>%
mutate(factor = deparse(substitute(n))) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = deparse(substitute({{n}}))) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
tooltiplabels <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(tooltiplabels) <- c('values', 'factor')
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select({{n}}) %>%
distinct({{n}}) %>%
mutate(factor = n) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select(n) %>%
distinct(n) %>%
mutate(factor = n) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
pacman::p_load(poLCA, ggplot2, plotly, tidyverse)
df <- read_csv("data/touristdata_clean.csv")
df_clustering <- df %>%
select(!code) %>%
select(!country) %>%
mutate(package_transport_int = recode(package_transport_int,
`1` = 2,
`0` = 1)) %>%
mutate(package_accomodation = recode(package_accomodation,
`1` = 2,
`0` = 1)) %>%
mutate(package_food = recode(package_food,
`1` = 2,
`0` = 1)) %>%
mutate(package_transport_tz = recode(package_transport_tz,
`1` = 2,
`0` = 1)) %>%
mutate(package_sightseeing = recode(package_sightseeing,
`1` = 2,
`0` = 1)) %>%
mutate(package_guided_tour = recode(package_guided_tour,
`1` = 2,
`0` = 1)) %>%
mutate(package_insurance = recode(package_insurance,
`1` = 2,
`0` = 1)) %>%
mutate(first_trip_tz = recode(first_trip_tz,
`1` = 2,
`0` = 1)) %>%
mutate(duration = cut(total_night_spent, breaks = c(0, 7, Inf),
labels = c("Within_1_week", "More_than_1_week"))) %>%
mutate(mainland_zanzibar = cut(prop_night_spent_mainland,
breaks = c(0, 0.5, Inf), right = F,
labels = c("zanzibar", "mainland"))) %>%
mutate(travel_with = recode(travel_with,
`Children` = "ImmediateFamily",
`Spouse` = "ImmediateFamily",
`Spouse and Children` = "ImmediateFamily")) %>%
select(!total_female) %>%
select(!total_male) %>%
filter(total_tourist > 0) %>%
mutate(total_tourist = cut(total_tourist,
breaks = c(0,1,2,Inf),
labels = c("1", "2", "3+"))) %>%
filter(purpose != "Other") %>%
mutate(purpose = recode(purpose,
`Business` = "Non-Leisure",
`Leisure and Holidays` = "Leisure",
`Meetings and Conference` = "Non-Leisure",
`Scientific and Academic` = "Non-Leisure",
`Visiting Friends and Relatives` = "Leisure",
`Volunteering` = "Non-Leisure")) %>%
select(!main_activity) %>%
mutate(info_source = recode(info_source,
`Friends, relatives` = "Word-of-Mouth",
`inflight magazines` = "Others",
`Newspaper, magazines,brochures` = "Others",
`others` = "Others",
`Radio, TV, Web` = "Others",
`Tanzania Mission Abroad` = "Others",
`Trade fair` = "Others",
`Travel, agent, tour operator` = "Travel agents")) %>%
select(!night_mainland) %>%
select(!night_zanzibar) %>%
select(!total_night_spent) %>%
select(!prop_night_spent_mainland) %>%
mutate(payment_mode = recode(payment_mode,
`Cash` = "Cash",
`Credit Card` = "Non-Cash",
`Other` = "Non-Cash",
`Travellers Cheque` = "Non-Cash")) %>%
select(!most_impressing) %>%
mutate(total_cost = cut(total_cost,
breaks = c(0, 800000, 3550000, 9950000, Inf),
right = F,
labels = c("800k or less", "800k - 3.55mil",
"3.55mil - 9.95mil",
"More than 9.95mil")))
##ensure all variables are factors
df_clustering[-1] <- lapply(df_clustering[-1], factor)
##ensure no missing values
sapply(df_clustering, function(x) sum(is.na(x)))
set.seed(1234)
f <- as.formula(cbind(region, age_group, travel_with, total_tourist, purpose,
info_source, tour_arrangement, package_transport_int,
package_accomodation, package_food, package_transport_tz,
package_sightseeing, package_guided_tour,
package_insurance, payment_mode, first_trip_tz,
total_cost, duration, mainland_zanzibar)~1)
##latent class analysis specifying 3 classes
##the more classes and variables there are, the longer it takes to run
##can consider limiting the nclass to between 2-7
##limit nrep to between 1 to 5
LCA_model <- poLCA(f, df_clustering, nclass=7, nrep=5, maxiter=5000)
shiny::runApp('ShinyDashboard')
set.seed(1234)
f <- as.formula(cbind(region, age_group, travel_with, total_tourist, purpose,
info_source, tour_arrangement, package_transport_int,
package_accomodation, package_food, package_transport_tz,
package_sightseeing, package_guided_tour,
package_insurance, payment_mode, first_trip_tz,
total_cost, duration, mainland_zanzibar)~1)
##latent class analysis specifying 3 classes
##the more classes and variables there are, the longer it takes to run
##can consider limiting the nclass to between 2-7
##limit nrep to between 1 to 5
LCA_model <- poLCA(f, df_clustering, nclass=7, nrep=5, maxiter=5000)
##plot % of sample falling within each cluster
df_clustering$class
pacman::p_load(poLCA, ggplot2, plotly, tidyverse)
df <- read_csv("data/touristdata_clean.csv")
pacman::p_load(poLCA, ggplot2, plotly, tidyverse)
df <- read_csv("data/touristdata_clean.csv")
df_clustering <- df %>%
select(!code) %>%
select(!country) %>%
mutate(package_transport_int = recode(package_transport_int,
`1` = 2,
`0` = 1)) %>%
mutate(package_accomodation = recode(package_accomodation,
`1` = 2,
`0` = 1)) %>%
mutate(package_food = recode(package_food,
`1` = 2,
`0` = 1)) %>%
mutate(package_transport_tz = recode(package_transport_tz,
`1` = 2,
`0` = 1)) %>%
mutate(package_sightseeing = recode(package_sightseeing,
`1` = 2,
`0` = 1)) %>%
mutate(package_guided_tour = recode(package_guided_tour,
`1` = 2,
`0` = 1)) %>%
mutate(package_insurance = recode(package_insurance,
`1` = 2,
`0` = 1)) %>%
mutate(first_trip_tz = recode(first_trip_tz,
`1` = 2,
`0` = 1)) %>%
mutate(duration = cut(total_night_spent, breaks = c(0, 7, Inf),
labels = c("Within_1_week", "More_than_1_week"))) %>%
mutate(mainland_zanzibar = cut(prop_night_spent_mainland,
breaks = c(0, 0.5, Inf), right = F,
labels = c("zanzibar", "mainland"))) %>%
mutate(travel_with = recode(travel_with,
`Children` = "ImmediateFamily",
`Spouse` = "ImmediateFamily",
`Spouse and Children` = "ImmediateFamily")) %>%
select(!total_female) %>%
select(!total_male) %>%
filter(total_tourist > 0) %>%
mutate(total_tourist = cut(total_tourist,
breaks = c(0,1,2,Inf),
labels = c("1", "2", "3+"))) %>%
filter(purpose != "Other") %>%
mutate(purpose = recode(purpose,
`Business` = "Non-Leisure",
`Leisure and Holidays` = "Leisure",
`Meetings and Conference` = "Non-Leisure",
`Scientific and Academic` = "Non-Leisure",
`Visiting Friends and Relatives` = "Leisure",
`Volunteering` = "Non-Leisure")) %>%
select(!main_activity) %>%
mutate(info_source = recode(info_source,
`Friends, relatives` = "Word-of-Mouth",
`inflight magazines` = "Others",
`Newspaper, magazines,brochures` = "Others",
`others` = "Others",
`Radio, TV, Web` = "Others",
`Tanzania Mission Abroad` = "Others",
`Trade fair` = "Others",
`Travel, agent, tour operator` = "Travel agents")) %>%
select(!night_mainland) %>%
select(!night_zanzibar) %>%
select(!total_night_spent) %>%
select(!prop_night_spent_mainland) %>%
mutate(payment_mode = recode(payment_mode,
`Cash` = "Cash",
`Credit Card` = "Non-Cash",
`Other` = "Non-Cash",
`Travellers Cheque` = "Non-Cash")) %>%
select(!most_impressing) %>%
mutate(total_cost = cut(total_cost,
breaks = c(0, 800000, 3550000, 9950000, Inf),
right = F,
labels = c("800k or less", "800k - 3.55mil",
"3.55mil - 9.95mil",
"More than 9.95mil")))
##ensure all variables are factors
df_clustering[-1] <- lapply(df_clustering[-1], factor)
##ensure no missing values
sapply(df_clustering, function(x) sum(is.na(x)))
set.seed(1234)
f <- as.formula(cbind(region, age_group, travel_with, total_tourist, purpose,
info_source, tour_arrangement, package_transport_int,
package_accomodation, package_food, package_transport_tz,
package_sightseeing, package_guided_tour,
package_insurance, payment_mode, first_trip_tz,
total_cost, duration, mainland_zanzibar)~1)
##latent class analysis specifying 3 classes
##the more classes and variables there are, the longer it takes to run
##can consider limiting the nclass to between 2-7
##limit nrep to between 1 to 5
LCA_model <- poLCA(f, df_clustering, nclass=7, nrep=5, maxiter=5000)
##in box similar to RSME for regression tree
LCA_model$bic
##in box similar to RSME for regression tree
LCA_model$aic
##in box similar to RSME for regression tree
entropy <- function(p) sum(-p*log(p))
error_prior <- entropy(LCA_model$P)
error_post <- mean(apply(LCA_model$posterior, c(1,2), entropy), na.rm=T)
LCA_entropy <- (error_prior - error_post) / error_prior
LCA_entropy
df_clustering$class <- LCA_model$predclass
df_clustering$class <- factor(df_clustering$class)
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
ungroup()
View(df_clustering_prop)
##plot % of sample falling within each cluster
df_clustering_total <- df_clustering %>%
summarise(counts = n())
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n())
ungroup()
##plot % of sample falling within each cluster
df_clustering_total <- df_clustering %>%
summarise(counts = n())
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
ungroup()
View(df_clustering_total)
##plot % of sample falling within each cluster
df_clustering_total <- df_clustering %>%
summarise(counts = n())
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
ungroup() %>%
left_join(df_clustering_total)
View(df_clustering_total)
View(df_clustering_prop)
View(df_clustering_prop)
##plot % of sample falling within each cluster
df_clustering_total <- df_clustering %>%
summarise(counts = n())
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(prop = counts / df_clustering_total)
ungroup()
##plot % of sample falling within each cluster
df_clustering_total <- df_clustering %>%
summarise(counts = n())
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(prop = counts / df_clustering_total) %>%
ungroup()
View(df_clustering_prop)
##plotting results - change of x only
group_table <- df_clustering %>%
group_by(total_cost, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
class_table <- df_clustering %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
plot_table <- left_join(group_table, class_table) %>%
mutate(perc = round(counts*100/sum_count, 1)) %>%
rename(cluster = class) %>%
arrange(desc(total_cost)) %>%
arrange(cluster)
p1 <- ggplot(plot_table, aes(fill = total_cost, x = cluster, y = counts)) +
geom_bar(position = "fill", stat = "identity") + coord_flip()
fig1 <- ggplotly(p1)
fig1
View(group_table)
View(plot_table)
##plot % of sample falling within each cluster
df_clustering_total <- df_clustering %>%
summarise(counts = n())
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
ungroup()
##plot % of sample falling within each cluster
df_clustering_total <- df_clustering %>%
summarise(counts = n())
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
ungroup()
class_prop_table <- left_join(df_clustering_prop, df_clustering_total)
View(class_prop_table)
##plot % of sample falling within each cluster
df_clustering_total <- df_clustering %>%
summarise(counts = n())
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
summarise(total = sum(counts)) %>%
ungroup()
##plot % of sample falling within each cluster
df_clustering_total <- df_clustering %>%
summarise(counts = n())
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = percent(counts / sum(counts))) %>%
ungroup()
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = percent(counts / sum(counts))) %>%
ungroup()
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = percent(counts / sum(counts))) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(x = class_pct)) + geom_bar()
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = percent(counts / sum(counts))) %>%
ungroup()
ggplot(df_clustering_prop, aes(x = class_pct)) + geom_bar()
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = percent(counts / sum(counts))) %>%
ungroup()
ggplot(df_clustering_prop, aes(x = class, y = class_pct)) + geom_bar()
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = percent(counts / sum(counts))) %>%
ungroup()
ggplot(df_clustering_prop, aes(x = class, y = class_pct)) + geom_bar(stat = "identity")
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = percent(counts / sum(counts))) %>%
ungroup()
ggplot(df_clustering_prop, aes(x = class, y = class_pct)) + geom_bar(stat = "identity") + scale_y_continuous()
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
ggplot(df_clustering_prop, aes(x = class, y = class_pct)) + geom_bar(stat = "identity")
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = as.numeric(percent(counts / sum(counts)))) %>%
ungroup()
ggplot(df_clustering_prop, aes(x = class, y = class_pct)) + geom_bar(stat = "identity")
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
ggplot(df_clustering_prop, aes(x = class, y = class_pct)) + geom_bar(stat = "identity")
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(x = class, y = class_pct)) + geom_bar(stat = "identity")
plotly(fig_pct)
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(x = class, y = class_pct)) + geom_bar(stat = "identity")
ggplotly(fig_pct)
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(y = class, x = class_pct)) +
geom_bar(aes(text = paste0("prop: ",round(class_pct, 2),"%")), stat = "identity")
ggplotly(fig_pct)
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(y = class, x = class_pct)) +
geom_bar(aes(text = paste0("prop: ",round(class_pct, 2),"%")), stat = "identity")
ggplotly(fig_pct, tooltip = c("x", "text"))
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(y = class, x = class_pct)) +
geom_bar(aes(text = paste0("prop: ",round(class_pct, 2),"%")), stat = "identity")
ggplotly(fig_pct, tooltip = c("text"))
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(y = class, x = class_pct)) +
geom_bar(aes(text = paste0("prop: ",round(class_pct, 2),"%")), stat = "identity")
ggplotly(fig_pct, tooltip = "text")
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(y = class, x = class_pct)) +
geom_bar(aes(text = paste0("prop: ",round(class_pct, 2)*100,"%")), stat = "identity")
ggplotly(fig_pct, tooltip = "text")
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(y = class, x = class_pct)) +
geom_bar(aes(text = paste0("prop: ",round(class_pct, 2)*100,"%")), stat = "identity") +
labs(x = "Percentage of data in class", y = "Class")
ggplotly(fig_pct, tooltip = "text")
View(df_clustering)

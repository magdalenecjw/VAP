<<<<<<< HEAD
ungroup()
clust_class_table <- df_clustering %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
clust_plot_table <- left_join(plot_table, class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
runApp('ShinyDashboard')
##plotting results - change of x only
clust_grouped_table <- df_clustering_mod %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
clust_class_table <- df_clustering_mod %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
clust_plot_table <- left_join(clust_grouped_table, clust_class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
runApp('ShinyDashboard')
##plotting results - change of x only
clust_grouped_table <- df_clustering_mod %>%
group_by(purpose, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
clust_class_table <- df_clustering_mod %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
clust_plot_table <- left_join(clust_grouped_table, clust_class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill"))
fig1
runApp('ShinyDashboard')
#values
LCA_model$bic
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill")) %>%
layout(legend = list(orientation = 'h',
xanchor = "center",
x = 0.5,
yanchor = "top",
y = 1.15))
fig1
plot(LCA_model)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2)
View(LCA_model)
install.packages("reshape2")
pacman::p_load(poLCA, ggplot2, plotly, reshape2, tidyverse)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2)
View(lcModelProbs)
# Replicating the poLCA 3-D plot, without the 3-D:
zp1 <- ggplot(lcModelProbs,
aes(x = L1, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_wrap(~ Var1)
print(zp1)
,
# Replicating the poLCA 3-D plot, without the 3-D:
zp1 <- ggplot(lcModelProbs,
aes(x = L2, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_wrap(~ Var1)
print(zp1)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2))
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2))
zp2 <- zp2 + geom_bar(stat = "identity", position = "stack")
zp2 <- zp2 + facet_wrap(~ L2)
zp2 <- zp2 + scale_x_discrete("Class", expand = c(0, 0))
zp2 <- zp2 + scale_y_continuous("Proportion", expand = c(0, 0))
zp2 <- zp2 + scale_fill_discrete("Factor Level")
zp2 <- zp2 + theme_bw()
print(zp2)
clust_plot_table <- left_join(clust_grouped_table, clust_class_table) %>%
mutate(perc = round(counts*100/sum_count, 1))
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_bw(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill")) %>%
layout(legend = list(orientation = 'h',
xanchor = "center",
x = 0.5,
yanchor = "top",
y = 1.15))
fig1
p1 <- ggplot(clust_plot_table, aes(x = class, y = counts, fill = purpose)) +
geom_bar(
aes(text = paste0("prop: ",perc,"%")),
color = "black",
stat = "identity",
position = "fill") +
coord_flip() +
labs(x = "Class", y = "Proportion", fill = "Purpose") +
scale_y_continuous(labels = scales::percent) +
theme_minimal(base_size = 14)
p1
fig1 <- ggplotly(p1, tooltip = c("text", "x", "fill")) %>%
layout(legend = list(orientation = 'h',
xanchor = "center",
x = 0.5,
yanchor = "top",
y = 1.15))
fig1
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2)
# Replicating the poLCA 3-D plot, without the 3-D:
zp1 <- ggplot(lcModelProbs,
aes(x = L2, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_wrap(~ Var1)
print(zp1)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2))
zp2 <- zp2 + geom_bar(stat = "identity", position = "stack")
zp2 <- zp2 + facet_wrap(~ L2)
zp2 <- zp2 + scale_x_discrete("Class", expand = c(0, 0))
zp2 <- zp2 + scale_y_continuous("Proportion", expand = c(0, 0))
zp2 <- zp2 + scale_fill_discrete("Factor Level")
zp2 <- zp2 + theme_bw()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_minimal()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_bw()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_bw()
print(zp2)
shiny::runApp('ShinyDashboard')
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
#scale_x_discrete("Class", expand = c(0, 0)) +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level") +
theme_bw()
print(zp2)
#theme_bw()
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
print(zp2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Var1, y = value, fill = Var2)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ L2) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename("Class" = "Var1",
"Factor_level" = "Var2"
"Prop" = "value",
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename("Class" = "Var1",
"Factor_level" = "Var2"
"Prop" = "value",
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2)
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = Prop*100)
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Make a cleaner plot, first easily converting a list to a DF with melt():
lcModelProbs <- melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2))
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2)
fig2
# Suggested alternative, as a possible improvement:
zp2 <- ggplot(lcModelProbs,
aes(x = Class, y = Prop, fill = Factor_level)) +
geom_bar(
aes(text = paste0("prop: ",Prop,"%")),
stat = "identity", position = "stack") +
facet_wrap(~ Category) +
coord_flip() +
scale_y_continuous("Proportion", expand = c(0, 0)) +
scale_fill_discrete("Factor Level")  +
theme_minimal(base_size = 10)
fig2 <- ggplotly(zp2, tooltip = c("text", "x", "fill"))
fig2
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
runApp('ShinyDashboard')
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
pacman::p_load(poLCA, ggplot2, plotly, tidyverse)
df <- read_csv("data/touristdata_clean.csv")
pacman::p_load(poLCA, ggplot2, plotly, tidyverse)
df <- read_csv("data/touristdata_clean.csv")
df_clustering <- df %>%
select(!code) %>%
select(!country) %>%
mutate(package_transport_int = recode(package_transport_int,
`1` = 2,
`0` = 1)) %>%
mutate(package_accomodation = recode(package_accomodation,
=======
>>>>>>> f2345171c396e5140cc7fd4c85d13c3ee4c79acb
`1` = 2,
`0` = 1)) %>%
mutate(package_food = recode(package_food,
`1` = 2,
`0` = 1)) %>%
mutate(package_transport_tz = recode(package_transport_tz,
`1` = 2,
`0` = 1)) %>%
mutate(package_sightseeing = recode(package_sightseeing,
`1` = 2,
`0` = 1)) %>%
mutate(package_guided_tour = recode(package_guided_tour,
`1` = 2,
`0` = 1)) %>%
mutate(package_insurance = recode(package_insurance,
`1` = 2,
`0` = 1)) %>%
mutate(first_trip_tz = recode(first_trip_tz,
`1` = 2,
`0` = 1)) %>%
mutate(duration = cut(total_night_spent, breaks = c(0, 7, Inf),
labels = c("Within_1_week", "More_than_1_week"))) %>%
mutate(mainland_zanzibar = cut(prop_night_spent_mainland,
breaks = c(0, 0.5, Inf), right = F,
labels = c("zanzibar", "mainland"))) %>%
mutate(travel_with = recode(travel_with,
`Children` = "ImmediateFamily",
`Spouse` = "ImmediateFamily",
`Spouse and Children` = "ImmediateFamily")) %>%
select(!total_female) %>%
select(!total_male) %>%
filter(total_tourist > 0) %>%
mutate(total_tourist = cut(total_tourist,
breaks = c(0,1,2,Inf),
labels = c("1", "2", "3+"))) %>%
filter(purpose != "Other") %>%
mutate(purpose = recode(purpose,
`Business` = "Non-Leisure",
`Leisure and Holidays` = "Leisure",
`Meetings and Conference` = "Non-Leisure",
`Scientific and Academic` = "Non-Leisure",
`Visiting Friends and Relatives` = "Leisure",
`Volunteering` = "Non-Leisure")) %>%
select(!main_activity) %>%
mutate(info_source = recode(info_source,
`Friends, relatives` = "Word-of-Mouth",
`inflight magazines` = "Others",
`Newspaper, magazines,brochures` = "Others",
`others` = "Others",
`Radio, TV, Web` = "Others",
`Tanzania Mission Abroad` = "Others",
`Trade fair` = "Others",
`Travel, agent, tour operator` = "Travel agents")) %>%
select(!night_mainland) %>%
select(!night_zanzibar) %>%
select(!total_night_spent) %>%
select(!prop_night_spent_mainland) %>%
mutate(payment_mode = recode(payment_mode,
`Cash` = "Cash",
`Credit Card` = "Non-Cash",
`Other` = "Non-Cash",
`Travellers Cheque` = "Non-Cash")) %>%
select(!most_impressing) %>%
mutate(total_cost = cut(total_cost,
breaks = c(0, 800000, 3550000, 9950000, Inf),
right = F,
labels = c("800k or less", "800k - 3.55mil",
"3.55mil - 9.95mil",
"More than 9.95mil")))
##ensure all variables are factors
df_clustering[-1] <- lapply(df_clustering[-1], factor)
##ensure no missing values
sapply(df_clustering, function(x) sum(is.na(x)))
set.seed(1234)
f <- as.formula(cbind(region, age_group, travel_with, total_tourist, purpose,
info_source, tour_arrangement, package_transport_int,
package_accomodation, package_food, package_transport_tz,
package_sightseeing, package_guided_tour,
package_insurance, payment_mode, first_trip_tz,
total_cost, duration, mainland_zanzibar)~1)
##latent class analysis specifying 3 classes
##the more classes and variables there are, the longer it takes to run
##can consider limiting the nclass to between 2-7
##limit nrep to between 1 to 5
LCA_model <- poLCA(f, df_clustering, nclass=7, nrep=5, maxiter=5000)
##in box similar to RSME for regression tree
LCA_model$bic
##in box similar to RSME for regression tree
LCA_model$aic
##in box similar to RSME for regression tree
entropy <- function(p) sum(-p*log(p))
error_prior <- entropy(LCA_model$P)
error_post <- mean(apply(LCA_model$posterior, c(1,2), entropy), na.rm=T)
LCA_entropy <- (error_prior - error_post) / error_prior
LCA_entropy
df_clustering$class <- LCA_model$predclass
df_clustering$class <- factor(df_clustering$class)
##plot % of sample falling within each cluster
df_clustering_prop <- df_clustering %>%
group_by(class) %>%
summarise(counts = n()) %>%
mutate(class_pct = counts / sum(counts)) %>%
ungroup()
fig_pct <- ggplot(df_clustering_prop, aes(y = class, x = class_pct)) +
geom_bar(aes(text = paste0("prop: ",round(class_pct, 2)*100,"%")), stat = "identity") +
labs(x = "Percentage of data in class", y = "Class")
ggplotly(fig_pct, tooltip = "text")
##plotting results - change of x only
group_table <- df_clustering %>%
group_by(total_cost, class) %>% ##input x to be charted
summarise(counts = n()) %>%
ungroup()
class_table <- df_clustering %>%
group_by(class) %>%
summarise(sum_count = n()) %>%
ungroup()
plot_table <- left_join(group_table, class_table) %>%
mutate(perc = round(counts*100/sum_count, 1)) %>%
rename(cluster = class) %>%
arrange(desc(total_cost)) %>%
arrange(cluster)
p1 <- ggplot(plot_table, aes(fill = total_cost, x = cluster, y = counts)) +
geom_bar(position = "fill", stat = "identity") + coord_flip()
fig1 <- ggplotly(p1)
fig1
tooltip_levels <- df_clustering %>%
sapply(levels)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2)) %>%
p_overall <- ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level,
text = )) +
facet_wrap(~ Category) + coord_flip() + labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0))
for (i in names(df_clustering)) {
df_clustering[[i]] %>%
append(unique())
}
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1, Factor_level = Var2, Prop = value, Category = L2) %>%
mutate(Prop = round(Prop*100,2))
tooltip_levels$region
for (n in names(df_clustering[-1])) {
factor_level <- df_clustering %>%
select(n) %>%
distinct() %>%
mutate(factor = ) %>%
setNames(., c('values', 'factor'))
tooltiplabels <- rbind(tooltiplabels, factor_level)
}
tooltip_levels <- df_clustering %>%
sapply(levels)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2)) %>%
p_overall <- ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level,
text = )) +
facet_wrap(~ Category) + coord_flip() + labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0))
pacman::p_load(poLCA, ggplot2, plotly, tidyverse)
df <- read_csv("data/touristdata_clean.csv")
tooltip_levels <- df_clustering %>%
sapply(levels)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2)) %>%
p_overall <- ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level,
text = )) +
facet_wrap(~ Category) + coord_flip() + labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0))
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2))
##Plotting OVerall Plot
clust_plot_reactive <- ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level)) +
facet_wrap(~ Category) +
coord_flip() +
labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0)) +
theme_minimal(base_size = 10) +
scale_fill_manual(values = colorset)
LCA_model$probs
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2))
View(df_clustering_prob)
View(LCA_model)
LCA_model$predcell
LCA_model$predclass
df_clustering_labels <- df_clustering_prob %>%
select(Factor_level, Category) %>%
distinct()
View(df_clustering_labels)
##ensure all variables are factors
df_clustering[-1] <- lapply(df_clustering[-1], factor)
##ensure no missing values
sapply(df_clustering, function(x) sum(is.na(x)))
View(df_clustering)
label <- df_clustering %>%
select(region) %>%
distinct()
View(label)
levels(df_clustering$region)
runApp('ShinyDashboard')
<<<<<<< HEAD
shiny::runApp('ShinyDashboard')
=======
set.seed(1234)
f <- as.formula(cbind(region, age_group, travel_with, total_tourist, purpose,
info_source, tour_arrangement, package_transport_int,
package_accomodation, package_food, package_transport_tz,
package_sightseeing, package_guided_tour,
package_insurance, payment_mode, first_trip_tz,
total_cost, duration, mainland_zanzibar)~1)
##latent class analysis specifying 3 classes
##the more classes and variables there are, the longer it takes to run
##can consider limiting the nclass to between 2-7
##limit nrep to between 1 to 5
LCA_model <- poLCA(f, df_clustering, nclass=3, nrep=3, maxiter=5000)
set.seed(1234)
f <- as.formula(cbind(region, age_group, travel_with, total_tourist, purpose,
info_source, tour_arrangement, package_transport_int,
package_accomodation, package_food, package_transport_tz,
package_sightseeing, package_guided_tour,
package_insurance, payment_mode, first_trip_tz,
total_cost, duration, mainland_zanzibar)~1)
##latent class analysis specifying 3 classes
##the more classes and variables there are, the longer it takes to run
##can consider limiting the nclass to between 2-7
##limit nrep to between 1 to 5
LCA_model <- poLCA(f, df_clustering, nclass=3, nrep=3, maxiter=5000)
df_clustering$class <- LCA_model$predclass
df_clustering$class <- factor(df_clustering$class)
df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
rename(Class = Var1,
Factor_level = Var2,
Prop = value,
Category = L2) %>%
mutate(Prop = round(Prop*100,2))
##Plotting OVerall Plot
clust_plot_reactive <- ggplot(df_clustering_prob,
aes(x = Class, y = Prop, group = desc(Factor_level))) +
geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level)) +
facet_wrap(~ Category) +
coord_flip() +
labs(fill = "Factor Level") +
scale_y_continuous("Proportion", expand = c(0, 0)) +
theme_minimal(base_size = 10) +
scale_fill_manual(values = colorset)
df_clustering_labels <- df_clustering_prob %>%
select(Factor_level, Category) %>%
distinct()
levels(df_clustering$region)
levellabel <- levels(df_clustering$region)
df_clustering_labels <- df_clustering_prob %>%
select(Factor_level, Category) %>%
distinct()
distinct(df_clustering_labels$Category)
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
View(col_names)
levellabel <- levels(df_clustering$region)
df_clustering_labels <- df_clustering_prob %>%
select(Factor_level, Category) %>%
distinct()
df_clustering_labels <- df_clustering_prob %>%
select(Factor_level, Category) %>%
distinct() %>%
add_column(add_column = "tooltip_label")
df_clustering_labels <- df_clustering_prob %>%
select(Factor_level, Category) %>%
distinct() %>%
add_column(tooltiplabel = "")
class(levellabel)
levels(df_clustering$region)
class(levels(df_clustering$region))
list(levels(df_clustering$region))
}
list(levels(df_clustering$region))
list(levels(df_clustering$region))
list(levels(df_clustering$region))
df_clustering_labels <- df_clustering_prob %>%
select(Factor_level, Category) %>%
distinct() %>%
add_column(tooltiplabel = "")
df_clustering_labels <- rbind(df_clustering_labels, list(levels(df_clustering$region)))
region_label <- list(levels(df_clustering$region))
View(region_label)
View(col_names)
View(col_names)
list(levels(df_clustering$region))
label <- c()
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names) {
for (j in list(levels(df_clustering${{i}}))) {
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names) {
for (j in list(levels(df_clustering[[,1]]))) {
label <- append(label, j)
}
}
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names) {
for (j in list(levels(df_clustering$i))) {
label <- append(label, j)
}
}
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names) {
for (j in list(levels(df_clustering${{i}}))) {
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names) {
for (j in list(levels(df_clustering${{i}}))) {
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names) {
for (j in list(levels(df_clustering$`i`))) {
label <- append(label, j)
}
return(label)
}
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names) {
for (j in list(levels(df_clustering[[i]]))) {
label <- append(label, j)
}
return(label)
}
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names) {print(df_clustering[[i]])}
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names$Category) {print(df_clustering[[i]])}
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (i in col_names$Category){
for (j in list(levels(df_clustering[[i]]))) {
label <- append(label, j)
}
return(label)
}
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (row in 1:nrow(col_names$Category)){
for (j in list(levels(df_clustering[[row]]))) {
label <- append(label, j)
}
return(label)
}
col_names <- df_clustering_labels %>%
select(Category) %>%
distinct()
label <- c()
for (row in 1:nrow(col_names)){
for (j in list(levels(df_clustering[[row]]))) {
label <- append(label, j)
}
return(label)
}
nrow(col_names)
df_clustering[[1]]
df_clustering[[region]]
View(df_clustering)
df_clustering_wo_id <- df_clustering %>%
select(!ID)
label <- c()
for (row in 1:nrow(colnames(df_clustering_wo_id))){
for (j in list(levels(df_clustering_wo_id[[row]]))) {
label <- append(label, j)
}
return(label)
}
df_clustering_wo_id <- df_clustering %>%
select(!ID)
label <- c()
for (row in 1:length(colnames(df_clustering_wo_id))){
for (j in list(levels(df_clustering_wo_id[[row]]))) {
label <- append(label, j)
}
return(label)
}
df_clustering_wo_id <- df_clustering %>%
select(!ID)
colnames(df_clustering_wo_id)
length(colnames(df_clustering_wo_id))
df_clustering[[1]]
df_clustering_wo_id[[1]]
levels(df_clustering_wo_id[[1]])
list(levels(df_clustering_wo_id[[1]]))
for (i in list(levels(df_clustering_wo_id[[1]]))) {
label <- append(label, j)
}
label_table <- data.frame(matrix(ncol = 1, nrow = 0))
for (i in list(levels(df_clustering_wo_id[[1]]))) {
label_table <- rbind(label_table, j)
}
View(label_table)
label_table <- data.frame(matrix(ncol = 1, nrow = 0))
for (i in list(levels(df_clustering_wo_id[[1]]))) {
label_table <- cbind(label_table, j)
}
label_table <- data.frame(matrix(ncol = 1))
for (i in list(levels(df_clustering_wo_id[[1]]))) {
label_table <- cbind(label_table, j)
}
View(label_table)
label_table <- data.frame()
for (i in list(levels(df_clustering_wo_id[[1]]))) {
label_table <- cbind(label_table, j)
}
label_table <- data.frame(matrix(ncol = 0, nrow = 0))
for (i in list(levels(df_clustering_wo_id[[1]]))) {
label_table <- cbind(label_table, j)
}
label_table <- data.frame(matrix(ncol = 0, nrow = 0))
for (i in list(levels(df_clustering_wo_id[[1]]))) {
label_table <- rbind(label_table, j)
}
View(label_table)
label_table <- data.frame(matrix(ncol = 0, nrow = 0))
for (j in list(levels(df_clustering_wo_id[[1]]))) {
label_table <- rbind(label_table, j)
}
View(label_table)
df_clustering_wo_id <- df_clustering %>%
select(!ID)
label_table <- data.frame(matrix(ncol = 0, nrow = 0))
for (row in 1:length(colnames(df_clustering_wo_id))){
for (j in list(levels(df_clustering_wo_id[[1]]))) {
label_table <- rbind(label_table, j)
}
return(label_table)
}
View(label_table)
df_clustering_wo_id <- df_clustering %>%
select(!ID)
label_table <- data.frame(matrix(ncol = 0, nrow = 0))
for (row in 1:length(colnames(df_clustering_wo_id))){
for (j in list(levels(df_clustering_wo_id[[row]]))) {
label_table <- rbind(label_table, j)
}
return(label_table)
}
View(label_table)
type <- sapply(df_clustering,class)
factors = type[type=="factor"]
type <- sapply(df_clustering,class)
factors = type[type=="factor"]
output <- lapply(names(factors),function(x){
res <- data.frame(VarName=x,
Level=levels(df_clustering[,x]),
Number=1:nlevels(df_clustering[,x]))
return(res)
})
type <- sapply(df_clustering, class)
factors = type[type=="factor"]
output <- lapply(names(factors),function(x){
res <- data.frame(VarName=x,
Level=levels(df_clustering[,x]),
Number=1:nlevels(df_clustering[,x]))
return(res)
})
>>>>>>> f2345171c396e5140cc7fd4c85d13c3ee4c79acb

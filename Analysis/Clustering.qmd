---
title: "Clustering Analysis"
author: "Habari Tanzania"
date: 11 Mar 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

# Load Packages and Data

```{r}
pacman::p_load(poLCA, ggplot2, plotly, tidyverse)

df <- read_csv("data/touristdata_clean.csv")

```

# Latent Class Analysis

-   As poLCA expects all variables to start at level 1, dichotomous variables that are currently in 0/1 format need to be recoded as 1/2.

-   Continuous variables also need to be binned into categories of relatively similar sizes.

-   In addition, variables with imbalance classification will be recoded into broader (and fewer) categories.

-   Lastly, some of the categories are dropped if they are deemed to be less useful for use in classification.

```{r}
df_clustering <- df %>%
  select(!code) %>% 
  select(!country) %>%
  mutate(package_transport_int = recode(package_transport_int,
                                        `1` = 2,
                                        `0` = 1)) %>%
  mutate(package_accomodation = recode(package_accomodation,
                                        `1` = 2,
                                        `0` = 1)) %>%
  mutate(package_food = recode(package_food,
                                        `1` = 2,
                                        `0` = 1)) %>%
  mutate(package_transport_tz = recode(package_transport_tz,
                                        `1` = 2,
                                        `0` = 1)) %>%
  mutate(package_sightseeing = recode(package_sightseeing,
                                        `1` = 2,
                                        `0` = 1)) %>%
  mutate(package_guided_tour = recode(package_guided_tour,
                                        `1` = 2,
                                        `0` = 1)) %>%
  mutate(package_insurance = recode(package_insurance,
                                        `1` = 2,
                                        `0` = 1)) %>%
  mutate(first_trip_tz = recode(first_trip_tz,
                                        `1` = 2,
                                        `0` = 1)) %>%
  mutate(duration = cut(total_night_spent, breaks = c(0, 7, Inf), 
             labels = c("Within_1_week", "More_than_1_week"))) %>%
  mutate(mainland_zanzibar = cut(prop_night_spent_mainland, 
                                 breaks = c(0, 0.5, Inf), right = F, 
                                 labels = c("zanzibar", "mainland"))) %>%
  mutate(travel_with = recode(travel_with,
                              `Children` = "ImmediateFamily",
                              `Spouse` = "ImmediateFamily",
                              `Spouse and Children` = "ImmediateFamily")) %>%
  select(!total_female) %>%
  select(!total_male) %>%
  filter(total_tourist > 0) %>%
  mutate(total_tourist = cut(total_tourist,
                             breaks = c(0,1,2,Inf),
                             labels = c("1", "2", "3+"))) %>%
  filter(purpose != "Other") %>%
  mutate(purpose = recode(purpose,
                          `Business` = "Non-Leisure",
                          `Leisure and Holidays` = "Leisure",
                          `Meetings and Conference` = "Non-Leisure",
                          `Scientific and Academic` = "Non-Leisure",
                          `Visiting Friends and Relatives` = "Leisure",
                          `Volunteering` = "Non-Leisure")) %>%
  select(!main_activity) %>%
  mutate(info_source = recode(info_source,
                          `Friends, relatives` = "Word-of-Mouth",
                          `inflight magazines` = "Others",
                          `Newspaper, magazines,brochures` = "Others",
                          `others` = "Others",
                          `Radio, TV, Web` = "Others",
                          `Tanzania Mission Abroad` = "Others",
                          `Trade fair` = "Others",
                          `Travel, agent, tour operator` = "Travel agents")) %>%
  select(!night_mainland) %>%
  select(!night_zanzibar) %>%
  select(!total_night_spent) %>%
  select(!prop_night_spent_mainland) %>%
  mutate(payment_mode = recode(payment_mode,
                               `Cash` = "Cash",
                               `Credit Card` = "Non-Cash",
                               `Other` = "Non-Cash",
                               `Travellers Cheque` = "Non-Cash")) %>%
  select(!most_impressing) %>%
  mutate(total_cost = cut(total_cost, 
                          breaks = c(0, 800000, 3550000, 9950000, Inf), 
                          right = F, 
                          labels = c("800k or less", "800k - 3.55mil", 
                                     "3.55mil - 9.95mil", 
                                     "More than 9.95mil")))

```

Once the data set is cleaned, all variables are converted into factors and checked to ensure that there are no missing values.

```{r}

##ensure all variables are factors
df_clustering[-1] <- lapply(df_clustering[-1], factor)

##ensure no missing values
sapply(df_clustering, function(x) sum(is.na(x)))

```

We can then proceed to run the model by specifying the the number of classes we want and the number of repeats we will run for the model. If the number of repeats \> 1 (i.e. more than 1 run of the model is done), it means that a global search was done to obtain the lowest BIC score.

```{r}
set.seed(1234)

f <- as.formula(cbind(region, age_group, travel_with, total_tourist, purpose,
                      info_source, tour_arrangement, package_transport_int,
                      package_accomodation, package_food, package_transport_tz,
                      package_sightseeing, package_guided_tour,
                      package_insurance, payment_mode, first_trip_tz,
                      total_cost, duration, mainland_zanzibar)~1)

##latent class analysis specifying 3 classes
##the more classes and variables there are, the longer it takes to run

##can consider limiting the nclass to between 2-7
##limit nrep to between 1 to 5
LCA_model <- poLCA(f, df_clustering, nclass=7, nrep=5, maxiter=5000)
```

### Plot BIC score

```{r}
##in box similar to RSME for regression tree
LCA_model$bic
```

### Plot AIC score

```{r}
##in box similar to RSME for regression tree
LCA_model$aic
```

### Plot Entropy

-   Entropy indicates how accurately the model defines classes. In general, an entropy value close to 1 is ideal and above 0.8 is acceptable. Anything below 0.6 is likely to be a suggestion of poor classification.

```{r}
##in box similar to RSME for regression tree
entropy <- function(p) sum(-p*log(p))
error_prior <- entropy(LCA_model$P)
error_post <- mean(apply(LCA_model$posterior, c(1,2), entropy), na.rm=T)
LCA_entropy <- (error_prior - error_post) / error_prior
LCA_entropy
```

### Visualising Results

-   The model classification is appended to the original data set for plotting of the variables to compare across the classes.

```{r}
df_clustering$class <- LCA_model$predclass
df_clustering$class <- factor(df_clustering$class)
```

```{r}
##plotting results - change of x only
group_table <- df_clustering %>%
  group_by(total_cost, class) %>% ##input x to be charted
  summarise(counts = n()) %>% 
  ungroup()

class_table <- df_clustering %>%
  group_by(class) %>%
  summarise(sum_count = n()) %>%
  ungroup()

plot_table <- left_join(group_table, class_table) %>%
  mutate(perc = round(counts*100/sum_count, 1)) %>%
  rename(cluster = class) %>%
  arrange(desc(total_cost)) %>%
  arrange(cluster)

p1 <- ggplot(plot_table, aes(fill = total_cost, x = cluster, y = counts)) + 
  geom_bar(position = "fill", stat = "identity") + coord_flip()

fig1 <- ggplotly(p1)

fig1
```
```{r}
tooltip_levels <- df_clustering %>% 
  sapply(levels)

df_clustering_prob <- reshape2::melt(LCA_model$probs, level = 2) %>%
        rename(Class = Var1,
               Factor_level = Var2,
               Prop = value,
               Category = L2) %>%
        mutate(Prop = round(Prop*100,2)) %>%
      
p_overall <- ggplot(df_clustering_prob, 
                    aes(x = Class, y = Prop, group = desc(Factor_level))) + 
  geom_bar(stat = "identity", position = "stack", aes(fill = Factor_level,
                                                      text = )) +
  facet_wrap(~ Category) + coord_flip() + labs(fill = "Factor Level") + 
  scale_y_continuous("Proportion", expand = c(0, 0))

ggplotly(p_overall, tooltip = text_levels)
```
